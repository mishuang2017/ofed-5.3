From: Valentine Fatiev <valentinef@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/eswitch.h

Change-Id: I3a4317fbb49ec315404e95114a724acadc14f332
---
 .../net/ethernet/mellanox/mlx5/core/eswitch.h | 71 +++++++++++++------
 1 file changed, 48 insertions(+), 23 deletions(-)

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
index xxxxxxx..xxxxxxx 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
@@ -45,14 +45,14 @@
 #include "mlx5_core.h"
 #include "meddev/sf.h"
 #include "lib/fs_chains.h"
-#include "en/tc_ct.h"
 #include "en/tc_sample.h"
 
-#ifdef CONFIG_MLX5_ESWITCH
-
 #define ESW_OFFLOADS_DEFAULT_NUM_GROUPS 15
 #define ESW_DEFAULT_E2E_CACHE_SIZE 0
 
+#ifdef CONFIG_MLX5_ESWITCH
+#include "en/tc_ct.h"
+
 #define MLX5_MAX_UC_PER_VPORT(dev) \
 	(1 << MLX5_CAP_GEN(dev, log_max_current_uc_list))
 
@@ -294,6 +294,9 @@ struct mlx5_esw_offload {
 	spinlock_t int_vports_lock; /* Protects int vports list */
 	struct list_head int_vports; /* Uses offloads.vports.lock */
 	bool int_vport_removing;
+#ifdef HAVE_DEVLINK_PORT_ATTRS_PCI_PF_SET_CONTROLLER_NUM
+	unsigned int host_number; /* ECPF supports one external host */
+#endif
 };
 
 /* E-Switch MC FDB table hash node */
@@ -461,12 +464,10 @@ int mlx5_eswitch_enable_locked(struct mlx5_eswitch *esw, int mode, int num_vfs);
 int mlx5_eswitch_enable(struct mlx5_eswitch *esw, int num_vfs);
 void mlx5_eswitch_disable_locked(struct mlx5_eswitch *esw, bool clear_vf);
 void mlx5_eswitch_disable(struct mlx5_eswitch *esw, bool clear_vf);
-int mlx5_eswitch_set_vport_mac(struct mlx5_eswitch *esw,
-			       u16 vport, const u8 *mac);
-int mlx5_eswitch_set_vport_state(struct mlx5_eswitch *esw,
-				 u16 vport, int link_state);
+#if IS_ENABLED(CONFIG_MLX5_CLS_ACT)
 int mlx5_eswitch_get_vport_from_vhca_id(struct mlx5_eswitch *esw, u16 vhca_id,
 					u16 *vport);
+#endif
 int mlx5_eswitch_set_vport_vlan(struct mlx5_eswitch *esw,
 				int vport, u16 vlan, u8 qos, __be16 vlan_proto);
 int mlx5_eswitch_set_vport_spoofchk(struct mlx5_eswitch *esw,
@@ -497,8 +498,6 @@ int mlx5_eswitch_enable_vport(struct mlx5_eswitch *esw,
 			      enum mlx5_eswitch_vport_event enable_events);
 void mlx5_eswitch_disable_vport(struct mlx5_eswitch *esw,
 				u16 vport_num);
-int mlx5_eswitch_setup_sf_vport(struct mlx5_eswitch *esw, u16 vport_num);
-void mlx5_eswitch_cleanup_sf_vport(struct mlx5_eswitch *esw, u16 vport_num);
 
 struct ifla_vf_stats_backport {
 	__u64 tx_broadcast;
@@ -668,11 +667,17 @@ struct mlx5_flow_attr {
 	};
 };
 
-int mlx5_devlink_eswitch_mode_set(struct devlink *devlink, u16 mode,
-				  struct netlink_ext_ack *extack);
+int mlx5_devlink_eswitch_mode_set(struct devlink *devlink, u16 mode
+#ifdef HAVE_DEVLINK_ESWITCH_MODE_SET_EXTACK
+				 , struct netlink_ext_ack *extack
+#endif
+				 );
 int mlx5_devlink_eswitch_mode_get(struct devlink *devlink, u16 *mode);
-int mlx5_devlink_eswitch_inline_mode_set(struct devlink *devlink, u8 mode,
-					 struct netlink_ext_ack *extack);
+int mlx5_devlink_eswitch_inline_mode_set(struct devlink *devlink, u8 mode
+#ifdef HAVE_DEVLINK_ESWITCH_MODE_SET_EXTACK
+					, struct netlink_ext_ack *extack
+#endif
+					);
 int mlx5_devlink_eswitch_inline_mode_get(struct devlink *devlink, u8 *mode);
 
 int mlx5_eswitch_vport_modify_other_hca_cap_roce(struct mlx5_eswitch *esw,
@@ -681,13 +686,27 @@ int mlx5_eswitch_vport_get_other_hca_cap_roce(struct mlx5_eswitch *esw,
 					      struct mlx5_vport *vport, bool *value);
 
 int mlx5_devlink_eswitch_encap_mode_set(struct devlink *devlink,
-					enum devlink_eswitch_encap_mode encap,
-					struct netlink_ext_ack *extack);
+#ifdef HAVE_DEVLINK_HAS_ESWITCH_ENCAP_MODE_SET_GET_WITH_ENUM
+					enum devlink_eswitch_encap_mode encap
+#else
+					u8 encap
+#endif
+#ifdef HAVE_DEVLINK_ESWITCH_MODE_SET_EXTACK
+					, struct netlink_ext_ack *extack
+#endif
+					);
 int mlx5_devlink_eswitch_encap_mode_get(struct devlink *devlink,
+#ifdef HAVE_DEVLINK_HAS_ESWITCH_ENCAP_MODE_SET_GET_WITH_ENUM
 					enum devlink_eswitch_encap_mode *encap);
+#else
+					u8 *encap);
+#endif
 int mlx5_devlink_eswitch_ipsec_mode_set(struct devlink *devlink,
-					enum devlink_eswitch_ipsec_mode ipsec,
-					struct netlink_ext_ack *extack);
+					enum devlink_eswitch_ipsec_mode ipsec
+#ifdef HAVE_DEVLINK_ESWITCH_MODE_SET_EXTACK
+					, struct netlink_ext_ack *extack
+#endif
+					);
 int mlx5_devlink_eswitch_ipsec_mode_get(struct devlink *devlink,
 					enum devlink_eswitch_ipsec_mode *ipsec);
 int mlx5_devlink_port_function_hw_addr_get(struct devlink *devlink,
@@ -1057,6 +1076,12 @@ mlx5_esw_put_int_vport(struct mlx5_eswitch *esw,
 		       struct mlx5_esw_int_vport *int_vport);
 void mlx5_esw_init_int_vport(struct mlx5_eswitch *esw);
 void mlx5_esw_cleanup_int_vport(struct mlx5_eswitch *esw);
+int mlx5_eswitch_setup_sf_vport(struct mlx5_eswitch *esw, u16 vport_num);
+void mlx5_eswitch_cleanup_sf_vport(struct mlx5_eswitch *esw, u16 vport_num);
+int mlx5_eswitch_set_vport_mac(struct mlx5_eswitch *esw,
+			       u16 vport, const u8 *mac);
+int mlx5_eswitch_set_vport_state(struct mlx5_eswitch *esw,
+				 u16 vport, int link_state);
 bool mlx5e_esw_offloads_pet_enabled(const struct mlx5_eswitch *esw);
 int mlx5e_esw_offloads_pet_setup(struct mlx5_eswitch *esw);
 void mlx5e_esw_offloads_pet_cleanup(struct mlx5_eswitch *esw);
@@ -1078,12 +1103,6 @@ static inline const u32 *mlx5_esw_query_functions(struct mlx5_core_dev *dev)
 	return ERR_PTR(-EOPNOTSUPP);
 }
 
-static inline struct mlx5_flow_handle *
-esw_add_restore_rule(struct mlx5_eswitch *esw, u32 tag)
-{
-	return ERR_PTR(-EOPNOTSUPP);
-}
-
 static inline bool
 mlx5_esw_is_manager_vport(const struct mlx5_core_dev *dev, u16 vport_num)
 {
@@ -1094,6 +1113,12 @@ static inline u16 mlx5_eswitch_max_sfs(const struct mlx5_core_dev *dev)
 {
 	return 0;
 }
+static inline int mlx5_eswitch_setup_sf_vport(struct mlx5_eswitch *esw, u16 vport_num){ return 0; }
+static inline void mlx5_eswitch_cleanup_sf_vport(struct mlx5_eswitch *esw, u16 vport_num){ return; }
+static inline int mlx5_eswitch_set_vport_mac(struct mlx5_eswitch *esw,
+		                                             u16 vport, u8 mac[ETH_ALEN]){ return 0; }
+static inline int mlx5_eswitch_get_vport_mac(struct mlx5_eswitch *esw,
+		                                             u16 vport, u8 *mac){ return 0; }
 
 static inline bool mlx5e_esw_offloads_pet_enabled(const struct mlx5_eswitch *esw)
 {
