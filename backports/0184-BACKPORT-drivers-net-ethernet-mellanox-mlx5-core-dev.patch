From: Valentine Fatiev <valentinef@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/devlink.c

Change-Id: I93c3fb22c977017182049e5e7701c279faee73e0
---
 .../net/ethernet/mellanox/mlx5/core/devlink.c | 251 +++++++++++++++---
 1 file changed, 221 insertions(+), 30 deletions(-)

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/devlink.c b/drivers/net/ethernet/mellanox/mlx5/core/devlink.c
index xxxxxxx..xxxxxxx 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/devlink.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/devlink.c
@@ -4,23 +4,55 @@
 #include <devlink.h>
 
 #include "mlx5_core.h"
+#ifdef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
+#include "fw_reset.h"
+#endif
 #include "fs_core.h"
 #include "eswitch.h"
 #include "en/tc_ct.h"
 
+#ifdef HAVE_DEVLINK_DRIVERINIT_VAL
+static unsigned int esw_offloads_num_big_groups = ESW_OFFLOADS_DEFAULT_NUM_GROUPS;
+#else
+unsigned int esw_offloads_num_big_groups = ESW_OFFLOADS_DEFAULT_NUM_GROUPS;
+#endif
+module_param_named(num_of_groups, esw_offloads_num_big_groups,
+                   uint, 0644);
+MODULE_PARM_DESC(num_of_groups,
+                 "Eswitch offloads number of big groups in FDB table. Valid range 1 - 1024. Default 15");
+
+#ifdef HAVE_DEVLINK_HAS_FLASH_UPDATE
 static int mlx5_devlink_flash_update(struct devlink *devlink,
+#ifdef HAVE_FLASH_UPDATE_GET_3_PARAMS
+				     struct devlink_flash_update_params *params,
+#else
 				     const char *file_name,
 				     const char *component,
+#endif
 				     struct netlink_ext_ack *extack)
 {
 	struct mlx5_core_dev *dev = devlink_priv(devlink);
 	const struct firmware *fw;
 	int err;
 
+#ifdef HAVE_FLASH_UPDATE_GET_3_PARAMS
+	if (params->component)
+#else
 	if (component)
+#endif
 		return -EOPNOTSUPP;
 
-	err = request_firmware_direct(&fw, file_name, &dev->pdev->dev);
+	err = request_firmware_direct(&fw,
+#ifdef HAVE_FLASH_UPDATE_GET_3_PARAMS
+#ifdef HAVE_DEVLINK_FLASH_UPDATE_PARAMS_HAS_STRUCT_FW
+			params->fw->data,
+#else
+			params->file_name,
+#endif
+#else
+			file_name,
+#endif
+			&dev->pdev->dev);
 	if (err)
 		return err;
 
@@ -29,7 +61,134 @@ static int mlx5_devlink_flash_update(struct devlink *devlink,
 
 	return err;
 }
+#endif
+
+#ifdef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
+static int mlx5_devlink_reload_fw_activate(struct devlink *devlink, struct netlink_ext_ack *extack)
+{
+	struct mlx5_core_dev *dev = devlink_priv(devlink);
+	u8 reset_level, reset_type, net_port_alive;
+	int err;
+
+	err = mlx5_fw_reset_query(dev, &reset_level, &reset_type);
+	if (err)
+		return err;
+	if (!(reset_level & MLX5_MFRL_REG_RESET_LEVEL3)) {
+		NL_SET_ERR_MSG_MOD(extack, "FW activate requires reboot");
+		return -EINVAL;
+	}
+
+	net_port_alive = !!(reset_type & MLX5_MFRL_REG_RESET_TYPE_NET_PORT_ALIVE);
+	err = mlx5_fw_reset_set_reset_sync(dev, net_port_alive);
+	if (err)
+		goto out;
+
+	err = mlx5_fw_reset_wait_reset_done(dev);
+out:
+	if (err)
+		NL_SET_ERR_MSG_MOD(extack, "FW activate command failed");
+	return err;
+}
+#endif
+
+#ifdef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
+static int mlx5_devlink_trigger_fw_live_patch(struct devlink *devlink,
+		struct netlink_ext_ack *extack)
+{
+	struct mlx5_core_dev *dev = devlink_priv(devlink);
+	u8 reset_level;
+	int err;
+
+	err = mlx5_fw_reset_query(dev, &reset_level, NULL);
+	if (err)
+		return err;
+	if (!(reset_level & MLX5_MFRL_REG_RESET_LEVEL0)) {
+		NL_SET_ERR_MSG_MOD(extack,
+				"FW upgrade to the stored FW can't be done by FW live patching");
+		return -EINVAL;
+	}
+
+	return mlx5_fw_reset_set_live_patch(dev);
+}
+#endif
+
+#ifdef HAVE_DEVLINK_HAS_RELOAD_UP_DOWN
+static int mlx5_devlink_reload_down(struct devlink *devlink,
+#ifdef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
+			     bool netns_change,
+			     enum devlink_reload_action action,
+			     enum devlink_reload_limit limit,
+#elif defined(HAVE_DEVLINK_RELOAD_DOWN_HAS_3_PARAMS)
+			     bool netns_change,
+#endif
+			     struct netlink_ext_ack *extack)
+{
+	struct mlx5_core_dev *dev = devlink_priv(devlink);
+#ifdef CONFIG_MLX5_ESWITCH
+	u16 mode = 0;
+
+	if (!mlx5_devlink_eswitch_mode_get(devlink, &mode)) {
+		if (mode == DEVLINK_ESWITCH_MODE_SWITCHDEV) {
+			NL_SET_ERR_MSG_MOD(extack, "Reload not supported in switchdev mode");
+			return -EOPNOTSUPP;
+		}
+	}
+#endif
+#ifdef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
+	switch (action) {
+		case DEVLINK_RELOAD_ACTION_DRIVER_REINIT:
+			mlx5_unload_one(dev, false);
+			return 0;
+		case DEVLINK_RELOAD_ACTION_FW_ACTIVATE:
+			if (limit == DEVLINK_RELOAD_LIMIT_NO_RESET)
+				return mlx5_devlink_trigger_fw_live_patch(devlink, extack);
+			return mlx5_devlink_reload_fw_activate(devlink, extack);
+		default:
+			/* Unsupported action should not get to this function */
+			WARN_ON(1);
+			return -EOPNOTSUPP;
+	}
+#else
+	mlx5_unload_one(dev, false);
+	return 0;
+#endif /* HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION */
+}
+
+static int mlx5_devlink_reload_up(struct devlink *devlink,
+#ifdef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
+		enum devlink_reload_action action,
+		enum devlink_reload_limit limit,
+		u32 *actions_performed,
+#endif
+		struct netlink_ext_ack *extack)
+{
+	struct mlx5_core_dev *dev = devlink_priv(devlink);
+#ifdef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
+	*actions_performed = BIT(action);
+	switch (action) {
+		case DEVLINK_RELOAD_ACTION_DRIVER_REINIT:
+			return mlx5_load_one(dev, false);
+		case DEVLINK_RELOAD_ACTION_FW_ACTIVATE:
+			if (limit == DEVLINK_RELOAD_LIMIT_NO_RESET)
+				break;
+			/* On fw_activate action, also driver is reloaded and reinit performed */
+			*actions_performed |= BIT(DEVLINK_RELOAD_ACTION_DRIVER_REINIT);
+			return mlx5_load_one(dev, false);
+		default:
+			/* Unsupported action should not get to this function */
+			WARN_ON(1);
+			return -EOPNOTSUPP;
+	}
+
+	return 0;
+#else
+	return mlx5_load_one(dev, false);
+#endif /* HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION */
+}
 
+#endif /* HAVE_DEVLINK_HAS_RELOAD_UP_DOWN */
+
+#if defined(HAVE_DEVLINK_HAS_INFO_GET) && defined(HAVE_DEVLINK_INFO_VERSION_FIXED_PUT)
 static u8 mlx5_fw_ver_major(u32 version)
 {
 	return (version >> 24) & 0xff;
@@ -46,7 +205,6 @@ static u16 mlx5_fw_ver_subminor(u32 version)
 }
 
 #define DEVLINK_FW_STRING_LEN 32
-
 static int
 mlx5_devlink_info_get(struct devlink *devlink, struct devlink_info_req *req,
 		      struct netlink_ext_ack *extack)
@@ -88,49 +246,42 @@ mlx5_devlink_info_get(struct devlink *devlink, struct devlink_info_req *req,
 
 	return 0;
 }
-
-static int mlx5_devlink_reload_down(struct devlink *devlink, bool netns_change,
-				    struct netlink_ext_ack *extack)
-{
-	struct mlx5_core_dev *dev = devlink_priv(devlink);
-#ifdef CONFIG_MLX5_ESWITCH
-	u16 mode = 0;
-
-	if (!mlx5_devlink_eswitch_mode_get(devlink, &mode)) {
-		if (mode == DEVLINK_ESWITCH_MODE_SWITCHDEV) {
-			NL_SET_ERR_MSG_MOD(extack, "Reload not supported in switchdev mode");
-			return -EOPNOTSUPP;
-		}
-	}
 #endif
 
-	mlx5_unload_one(dev, false);
-	return 0;
-}
-
-static int mlx5_devlink_reload_up(struct devlink *devlink,
-				  struct netlink_ext_ack *extack)
-{
-	struct mlx5_core_dev *dev = devlink_priv(devlink);
-
-	return mlx5_load_one(dev, false);
-}
-
 static const struct devlink_ops mlx5_devlink_ops = {
 #ifdef CONFIG_MLX5_ESWITCH
+#ifdef HAVE_DEVLINK_HAS_ESWITCH_MODE_GET_SET
 	.eswitch_mode_set = mlx5_devlink_eswitch_mode_set,
 	.eswitch_mode_get = mlx5_devlink_eswitch_mode_get,
+#endif /* HAVE_DEVLINK_HAS_ESWITCH_MODE_GET_SET */
+#ifdef HAVE_DEVLINK_HAS_ESWITCH_INLINE_MODE_GET_SET
 	.eswitch_inline_mode_set = mlx5_devlink_eswitch_inline_mode_set,
 	.eswitch_inline_mode_get = mlx5_devlink_eswitch_inline_mode_get,
+#endif /* HAVE_DEVLINK_HAS_ESWITCH_INLINE_MODE_GET_SET */
+#ifdef HAVE_DEVLINK_HAS_ESWITCH_ENCAP_MODE_SET
 	.eswitch_encap_mode_set = mlx5_devlink_eswitch_encap_mode_set,
 	.eswitch_encap_mode_get = mlx5_devlink_eswitch_encap_mode_get,
+#endif /* HAVE_DEVLINK_HAS_ESWITCH_ENCAP_MODE_SET */
+#endif
+#ifdef HAVE_DEVLINK_HAS_PORT_FUNCTION_HW_ADDR_GET
 	.port_function_hw_addr_get = mlx5_devlink_port_function_hw_addr_get,
 	.port_function_hw_addr_set = mlx5_devlink_port_function_hw_addr_set,
 #endif
+#ifdef HAVE_DEVLINK_HAS_FLASH_UPDATE
 	.flash_update = mlx5_devlink_flash_update,
-	.info_get = mlx5_devlink_info_get,
+#endif /* HAVE_DEVLINK_HAS_FLASH_UPDATE */
+#ifdef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
+	.reload_actions = BIT(DEVLINK_RELOAD_ACTION_DRIVER_REINIT) |
+		       	  BIT(DEVLINK_RELOAD_ACTION_FW_ACTIVATE),
+	.reload_limits = BIT(DEVLINK_RELOAD_LIMIT_NO_RESET),
+#endif
+#ifdef HAVE_DEVLINK_HAS_RELOAD_UP_DOWN
 	.reload_down = mlx5_devlink_reload_down,
 	.reload_up = mlx5_devlink_reload_up,
+#endif /* HAVE_DEVLINK_HAS_RELOAD_UP_DOWN */
+#if defined(HAVE_DEVLINK_HAS_INFO_GET) && defined(HAVE_DEVLINK_INFO_VERSION_FIXED_PUT)
+	.info_get = mlx5_devlink_info_get,
+#endif /* HAVE_DEVLINK_HAS_INFO_GET */
 };
 
 struct devlink *mlx5_devlink_alloc(void)
@@ -143,6 +294,8 @@ void mlx5_devlink_free(struct devlink *devlink)
 	devlink_free(devlink);
 }
 
+
+#if defined(HAVE_DEVLINK_PARAM) && defined(HAVE_DEVLINK_PARAMS_PUBLISHED)
 static int mlx5_devlink_fs_mode_validate(struct devlink *devlink, u32 id,
 					 union devlink_param_value val,
 					 struct netlink_ext_ack *extack)
@@ -207,6 +360,7 @@ static int mlx5_devlink_fs_mode_get(struct devlink *devlink, u32 id,
 	return 0;
 }
 
+#ifdef HAVE_DEVLINK_PARAM_GENERIC_ID_ENABLE_ROCE
 static int mlx5_devlink_enable_roce_validate(struct devlink *devlink, u32 id,
 					     union devlink_param_value val,
 					     struct netlink_ext_ack *extack)
@@ -221,6 +375,7 @@ static int mlx5_devlink_enable_roce_validate(struct devlink *devlink, u32 id,
 
 	return 0;
 }
+#endif
 
 #ifdef CONFIG_MLX5_ESWITCH
 static int mlx5_devlink_large_group_num_validate(struct devlink *devlink, u32 id,
@@ -323,6 +478,26 @@ static int mlx5_devlink_ct_max_offloaded_conns_get(struct devlink *devlink, u32
 	return 0;
 }
 
+#ifdef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
+static int mlx5_devlink_enable_remote_dev_reset_set(struct devlink *devlink, u32 id,
+		struct devlink_param_gset_ctx *ctx)
+{
+	struct mlx5_core_dev *dev = devlink_priv(devlink);
+
+	mlx5_fw_reset_enable_remote_dev_reset_set(dev, ctx->val.vbool);
+	return 0;
+}
+
+static int mlx5_devlink_enable_remote_dev_reset_get(struct devlink *devlink, u32 id,
+		struct devlink_param_gset_ctx *ctx)
+{
+	struct mlx5_core_dev *dev = devlink_priv(devlink);
+
+	ctx->val.vbool = mlx5_fw_reset_enable_remote_dev_reset_get(dev);
+	return 0;
+}
+#endif
+
 static const struct devlink_param mlx5_devlink_params[] = {
 	DEVLINK_PARAM_DRIVER(MLX5_DEVLINK_PARAM_ID_CT_ACTION_ON_NAT_CONNS,
 			     "ct_action_on_nat_conns", DEVLINK_PARAM_TYPE_BOOL,
@@ -335,8 +510,15 @@ static const struct devlink_param mlx5_devlink_params[] = {
 			     BIT(DEVLINK_PARAM_CMODE_RUNTIME),
 			     mlx5_devlink_fs_mode_get, mlx5_devlink_fs_mode_set,
 			     mlx5_devlink_fs_mode_validate),
+#ifdef HAVE_DEVLINK_PARAM_GENERIC_ID_ENABLE_ROCE
 	DEVLINK_PARAM_GENERIC(ENABLE_ROCE, BIT(DEVLINK_PARAM_CMODE_DRIVERINIT),
 			      NULL, NULL, mlx5_devlink_enable_roce_validate),
+#endif
+#ifdef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
+	DEVLINK_PARAM_GENERIC(ENABLE_REMOTE_DEV_RESET, BIT(DEVLINK_PARAM_CMODE_RUNTIME),
+			mlx5_devlink_enable_remote_dev_reset_get,
+			mlx5_devlink_enable_remote_dev_reset_set, NULL),
+#endif
 	DEVLINK_PARAM_DRIVER(MLX5_DEVLINK_PARAM_ID_CT_MAX_OFFLOADED_CONNS,
 			     "ct_max_offloaded_conns", DEVLINK_PARAM_TYPE_U32,
 			     BIT(DEVLINK_PARAM_CMODE_RUNTIME),
@@ -378,13 +560,15 @@ static void mlx5_devlink_set_params_init_values(struct devlink *devlink)
 					   MLX5_DEVLINK_PARAM_ID_FLOW_STEERING_MODE,
 					   value);
 
+#ifdef HAVE_DEVLINK_PARAM_GENERIC_ID_ENABLE_ROCE
 	value.vbool = MLX5_CAP_GEN(dev, roce);
 	devlink_param_driverinit_value_set(devlink,
 					   DEVLINK_PARAM_GENERIC_ID_ENABLE_ROCE,
 					   value);
+#endif
 
 #ifdef CONFIG_MLX5_ESWITCH
-	value.vu32 = ESW_OFFLOADS_DEFAULT_NUM_GROUPS;
+	value.vu32 = esw_offloads_num_big_groups;
 	devlink_param_driverinit_value_set(devlink,
 					   MLX5_DEVLINK_PARAM_ID_ESW_LARGE_GROUP_NUM,
 					   value);
@@ -402,6 +586,7 @@ static void mlx5_devlink_set_params_init_values(struct devlink *devlink)
 	}
 #endif
 }
+#endif /* HAVE_DEVLINK_HAS_INFO_GET && HAVE_DEVLINK_INFO_VERSION_FIXED_PUT */
 
 int mlx5_devlink_register(struct devlink *devlink, struct device *dev)
 {
@@ -411,23 +596,29 @@ int mlx5_devlink_register(struct devlink *devlink, struct device *dev)
 	if (err)
 		return err;
 
+#if defined(HAVE_DEVLINK_PARAM) && defined(HAVE_DEVLINK_PARAMS_PUBLISHED)
 	err = devlink_params_register(devlink, mlx5_devlink_params,
 				      ARRAY_SIZE(mlx5_devlink_params));
 	if (err)
 		goto params_reg_err;
 	mlx5_devlink_set_params_init_values(devlink);
+#ifdef HAVE_DEVLINK_PARAMS_PUBLISHED
 	devlink_params_publish(devlink);
+#endif /* HAVE_DEVLINK_PARAMS_PUBLISHED */
 	return 0;
 
 params_reg_err:
 	devlink_unregister(devlink);
+#endif
 	return err;
 }
 
 void mlx5_devlink_unregister(struct devlink *devlink)
 {
+#if defined(HAVE_DEVLINK_PARAM) && defined(HAVE_DEVLINK_PARAMS_PUBLISHED)
 	devlink_params_unregister(devlink, mlx5_devlink_params,
 				  ARRAY_SIZE(mlx5_devlink_params));
+#endif
 	devlink_unregister(devlink);
 }
 
