From: Valentine Fatiev <valentinef@mellanox.com>
Subject: [PATCH] BACKPORT:
 drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec.c

Change-Id: I7745efac55d71c1e75acceb63be35a777c4d8ca2
---
 .../mellanox/mlx5/core/en_accel/ipsec.c       | 26 +++++++++++++++++++
 1 file changed, 26 insertions(+)

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec.c b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec.c
index xxxxxxx..xxxxxxx 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec.c
@@ -265,6 +265,12 @@ initialize_lifetime_limit(struct mlx5e_ipsec_sa_entry *sa_entry,
 	if (MLX5_CAP_GEN(priv->mdev, fpga))
 		return;
 
+#ifndef HAVE_XFRM_STATE_EXPIRE
+	attrs->soft_packet_limit = IPSEC_NO_LIMIT;
+	attrs->hard_packet_limit = IPSEC_NO_LIMIT;
+	return;
+#endif
+
 	hard_limit = x->lft.hard_packet_limit;
 	soft_limit = (x->lft.soft_packet_limit == IPSEC_NO_LIMIT)
 			? 0 : x->lft.soft_packet_limit;
@@ -399,7 +405,11 @@ mlx5e_ipsec_build_accel_xfrm_attrs(struct mlx5e_ipsec_sa_entry *sa_entry,
 
 static inline int mlx5e_xfrm_validate_state(struct xfrm_state *x)
 {
+#ifdef HAVE_NET_DEVICE_REAL_DEV
 	struct net_device *netdev = x->xso.real_dev;
+#else
+	struct net_device *netdev = x->xso.dev;
+#endif
 	struct mlx5_core_dev *mdev;
 	struct mlx5_eswitch *esw;
 	struct mlx5e_priv *priv;
@@ -548,7 +558,11 @@ static void mlx5e_xfrm_fs_del_rule(struct mlx5e_priv *priv,
 static int mlx5e_xfrm_add_state(struct xfrm_state *x)
 {
 	struct mlx5e_ipsec_sa_entry *sa_entry = NULL;
+#ifdef HAVE_NET_DEVICE_REAL_DEV
 	struct net_device *netdev = x->xso.real_dev;
+#else
+	struct net_device *netdev = x->xso.dev;
+#endif
 	struct mlx5_accel_esp_xfrm_attrs attrs;
 	struct mlx5e_priv *priv;
 	unsigned int sa_handle;
@@ -745,6 +759,7 @@ struct mlx5e_ipsec_modify_state_work {
 	struct mlx5e_ipsec_sa_entry	*sa_entry;
 };
 
+#ifdef HAVE_XDO_DEV_STATE_ADVANCE_ESN
 static void _update_xfrm_state(struct work_struct *work)
 {
 	int ret;
@@ -784,13 +799,16 @@ static void mlx5e_xfrm_advance_esn_state(struct xfrm_state *x)
 	INIT_WORK(&modify_work->work, _update_xfrm_state);
 	WARN_ON(!queue_work(sa_entry->ipsec->wq, &modify_work->work));
 }
+#endif
 
 static const struct xfrmdev_ops mlx5e_ipsec_xfrmdev_ops = {
 	.xdo_dev_state_add	= mlx5e_xfrm_add_state,
 	.xdo_dev_state_delete	= mlx5e_xfrm_del_state,
 	.xdo_dev_state_free	= mlx5e_xfrm_free_state,
 	.xdo_dev_offload_ok	= mlx5e_ipsec_offload_ok,
+#ifdef HAVE_XDO_DEV_STATE_ADVANCE_ESN
 	.xdo_dev_state_advance_esn = mlx5e_xfrm_advance_esn_state,
+#endif
 };
 
 void mlx5e_ipsec_build_netdev(struct mlx5e_priv *priv)
@@ -898,6 +916,9 @@ static void _mlx5e_ipsec_async_event(struct work_struct *work)
 
 	/* Life time event */
 	if (!hard_cnt) { /* Notify hard lifetime to xfrm stack */
+#ifdef HAVE_XFRM_STATE_EXPIRE
+ 		xfrm_state_expire(xs, 1);
+#endif
 		goto out_xs_state;
 	}
 
@@ -906,6 +927,11 @@ static void _mlx5e_ipsec_async_event(struct work_struct *work)
 	 */
 	if (lft->round_soft) {
 		lft->round_soft--;
+
+#ifdef HAVE_XFRM_STATE_EXPIRE
+ 		if (!lft->round_soft)
+ 			xfrm_state_expire(xs, 0);
+#endif
 	}
 
 	if (!lft->is_simulated) /* hard_limit < IPSEC_HW_LIMIT */
